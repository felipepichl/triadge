generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// enum UserRole {
//   ADMIN
//   MEMBER
//   GUEST
// }

model User {
  id          String  @id @default(uuid())
  name        String
  email       String? @unique
  password    String?
  phoneNumber String
  avatar      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  UsersTokens       UserTokens[]
  Transaction       Transaction[]
  AccountPayable    AccountPayable[]
  FinancialCategory FinancialCategory[]
  Stock             Stock[]
}

model UserTokens {
  id           String   @id @default(uuid())
  refreshToken String
  expiresDate  DateTime

  users  User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FinancialCategory {
  id          String @id @default(uuid())
  description String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  parentCategoryId String?
  parentCategory   FinancialCategory?  @relation("Subcategories", fields: [parentCategoryId], references: [id])
  subcategories    FinancialCategory[] @relation("Subcategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  transactions            Transaction[] @relation("MainCategoryTransactions")
  subcategoryTransactions Transaction[] @relation("SubcategoryTransactions")

  accountsPayable            AccountPayable[] @relation("MainCategoryAccountsPayable")
  subcategoryAccountsPayable AccountPayable[] @relation("SubcategoryAccountsPayable")
}

model Transaction {
  id          String   @id @default(uuid())
  description String
  amount      Decimal
  date        DateTime @default(now())
  type        String
  detail      String?

  users  User   @relation(fields: [userId], references: [id])
  userId String

  financialCategoryId String
  financialCategory   FinancialCategory @relation("MainCategoryTransactions", fields: [financialCategoryId], references: [id])

  subcategoryId String?
  subcategory   FinancialCategory? @relation("SubcategoryTransactions", fields: [subcategoryId], references: [id])

  AccountPayable AccountPayable[]
}

model AccountPayable {
  id          String    @id @default(uuid())
  description String
  amount      Decimal
  dueDate     DateTime
  paymentDate DateTime?
  isPaid      Boolean   @default(false)

  isFixed          Boolean @default(false)
  isAmountVariable Boolean @default(false)

  interestPaid   Decimal?
  isInterestPaid Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id])

  financialCategoryId String
  financialCategory   FinancialCategory @relation("MainCategoryAccountsPayable", fields: [financialCategoryId], references: [id])

  subcategoryId String?
  subcategory   FinancialCategory? @relation("SubcategoryAccountsPayable", fields: [subcategoryId], references: [id])

  transaction   Transaction? @relation(fields: [transactionId], references: [id])
  transactionId String?
}

model Stock {
  id        String   @id @default(uuid())
  shortName String
  symbol    String
  price     Decimal
  date      DateTime
  quantity  Int
  type      String

  users  User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String
  costPrice   Decimal
  salePrice   Decimal
  stock       Int
  stockLimit  Int
  avatar      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  subcategory   Subcategory? @relation(fields: [subcategoryId], references: [id])
  subcategoryId String?

  brand   Brand?  @relation(fields: [brandId], references: [id])
  brandId String?
}

model Category {
  id          String @id @default(uuid())
  name        String
  description String

  products      Product[]
  subcategories Subcategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subcategory {
  id          String @id @default(uuid())
  name        String
  description String

  products Product[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id          String @id @default(uuid())
  name        String
  description String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
